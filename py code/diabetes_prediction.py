# -*- coding: utf-8 -*-
"""diabetes_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bR1SZIs1TH5Pijh4KXyA-JnU9QXVciNu
"""

#from sklearn.datasets import load_diabetes
import pandas  as pd
import seaborn as sbplt  # Data visualization library like matplotlib
import matplotlib.pyplot as plt

df=pd.read_csv('diabetes.csv')

# Printing the schema 
df.info()

# Description of data
#df.describe()

# Printing top 5 columns
df.head(5)

# Plotting particular column with count
sbplt.countplot(df['Pregnancies'])

# Histogram plot of entire dataframe 
#df.hist(figsize=(15,20))

# Scatter Plot
#sbplt.scatterplot(df['Pregnancies'],df['Glucose'])

# Pair plotdf
#sbplt.pairplot(df)

# Extracting features and labels from dataframe
features=df.iloc[:,0:8].values   # Fetching the starting 8 columns (features), because 9th column is Answer(label)
label=df.iloc[0:,8].values      # Fetching the 9th column that is the answer(label)

# Splitting the training and testing data
from sklearn.model_selection import train_test_split
train_data,test_data,train_label,test_label = train_test_split(features,label,test_size=0.2)

"""***Applying DecisionTreeClassifier***"""

# Calling Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier()

# Training the data
trained=clf.fit(train_data,train_label)

# Predicting the data
predicted=trained.predict(test_data)

predicted

test_label

# Checking Accuracy score
from sklearn.metrics import accuracy_score
dacs=accuracy_score(predicted,test_label)
dacs

"""***Applying KNN Classifier***"""

# Now applying KNN classifier
from sklearn.neighbors import KNeighborsClassifier
kclf=KNeighborsClassifier(n_neighbors=5)

# Training the data
ktrained=kclf.fit(train_data,train_label)

# Predicting the data
kpredicted=ktrained.predict(test_data)

kpredicted

test_label

kacs= accuracy_score(kpredicted,test_label)
kacs

plt.grid()
plt.xlim(0,3)
plt.ylim(0,1)
plt.bar([1],[dacs],label="DecisionTreeC")
plt.bar([2],[kacs],label="KNN Classifier")
plt.legend()

