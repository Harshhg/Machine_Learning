# -*- coding: utf-8 -*-
"""training_iris_flowers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ex67G90nHr-2tRM80TwVKLiqOUQYP20
"""

from sklearn.datasets import load_iris              # Loading the IRIS flower datasets
import matplotlib.pyplot as plt                     # Graph plotting library
from sklearn.tree import DecisionTreeClassifier     # Calling DecisionTreeClassifier Algorithm for training
from sklearn.metrics import accuracy_score         # To find the accuracy score

# Now loading IRIS data only..
iris = load_iris()

# First 50 - setosa
# 50-100 - versicolor
# 100-150 - virginica

dir(iris)

#print(iris.DESCR)   # description of  IRIS DATASET
print(iris.feature_names)

# Labels and answers 
print(iris.target_names)

# Actual data with attribue 
features=iris.data
print(features.shape)

type(features)  #  It is a numpy array

# Now time for label data that will be exactly same as number of feature data
label=iris.target
print(label)

# Here - 
# 0 - setosa
# 1 - versicolor
# 2 - virginica#

sepal_length=features[0:,0]
sepal_width=features[0:,1]
petal_length=features[0:,2]
petal_width=features[0:,3]

plt.xlabel("Sepal_Length")
plt.ylabel("Sepal_Width")
plt.scatter(sepal_length,sepal_width,label="Sepal Data")
plt.scatter(petal_length,petal_width, label="Petal Data",marker='x')
plt.legend()
plt.show()

# Now time for separting data into 2 categories...
# 1st category - Training Data
# 2nd category - Testing data ( for questions )
# Scikit learn library for doing this is -

from sklearn.model_selection import train_test_split
train_data,test_data,label_train,label_test = train_test_split(features,label, test_size=0.1)  # Separting test data .. test_size = 0.1 = 10% data...range (0-1)

# it separates data in 4 parts :
# 1. train_data = 90% of Actual data/(features) for TRAINING  -- *** --- We will pass this data to classifier
# 2. test_data =  10% of Actual data(features) for testing
# 3. label_train = 90% of the Answer(labels) for TRAINING  -- *** ---  We will pass this data to classifier
# 4. label_test = 10% of the Answer(labels) for testing

# -- LIBRARY-- from sklearn.tree import DecisionTreeClassifier 

# Calling Decision Tree classifier 
clf=DecisionTreeClassifier()

# Now time for Training classifier 
trained = clf.fit(train_data,label_train)  # Passing 90% of the training data..

# Now predicting Flowers ..
predicted_flowers=trained.predict(test_data)

predicted_flowers # Answer of the algorithm that machine gives

label_test  # Actual answer of the data passed to the machine

# -- LIBRARY-- from sklearn.metrics import accuracy_score 

# To find the accuracy score of the output- 
accuracy_score(label_test,predicted_flowers)

plt.plot(predicted_flowers,label_test)

