# -*- coding: utf-8 -*-
"""polynomial_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nQZW-Hvpge81te2amLAAm17bx2za5vUC
"""

import pandas as pd
import matplotlib.pyplot as plt

# Loading the data
df=pd.read_csv('http://13.234.66.67/summer19/datasets/pos_sal.csv')

# schema
df.info()

df.head(5)

# For polynomial model..
x=df.iloc[:,1:2].values

# salary for polynomial
y=df.iloc[:,2:].values

# Applying linear regression first
from sklearn.linear_model import LinearRegression

# Calling linear regression
regr1=LinearRegression()
trained=regr1.fit(x,y)

# Plotting graph against the data
plt.xlabel('position')
plt.ylabel('salary')
plt.scatter(x,y,label='Actual salary as per level')
plt.plot(x,trained.predict(x),label='Linear model predicted salary')
plt.legend()
plt.show()

# Now exponential polynomial features increasing
from sklearn.preprocessing import PolynomialFeatures

# Second degree polynomial features
poly = PolynomialFeatures(degree=2)
newx = poly.fit_transform(x)
newx

# Calling Linear Regression again
regr2=LinearRegression()
trained2=regr2.fit(newx,y)

predictedy=trained2.predict(newx)
# Plotting graph against the data
plt.xlabel('position')
plt.ylabel('salary')
plt.scatter(x,y,label='Actual salary as per level')
plt.plot(x,predictedy,label='Linear model predicted salary')
plt.legend()
plt.show()

"""Adding more degree"""

# Second degree polynomial features
poly = PolynomialFeatures(degree=4)
newx = poly.fit_transform(x)

# Calling Linear Regression again
regr2=LinearRegression()
trained2=regr2.fit(newx,y)

# Plotting graph against the data
plt.xlabel('position')
plt.ylabel('salary')
plt.scatter(x,y,label='Actual salary as per level')
plt.plot(x,trained2.predict(newx),label='Linear model predicted salary')
plt.legend()
plt.show()

